#!/usr/bin/perl
#
# Copyright (C) 2010-2017 Trizen <echo dHJpemVueEBnbWFpbC5jb20K | base64 -d>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Author: Daniel "Trizen" È˜uteu
# License: GPLv3
# First created on:  07 July 2010
# Rewritten on: 16 February 2011
# Second rewrite on: 24 March 2012
# Latest edit on: 05 June 2017
# http://github.com/trizen/trizen

eval 'exec perl -S $0 ${1+"$@"}'
  if 0;    # not running under some shell

use 5.014;
use strict;
use warnings;

no if $] >= 5.018, warnings => 'experimental::smartmatch';
no if $] >= 5.018, warnings => 'deprecated';

use Getopt::Std qw(getopts);
use Text::ParseWords qw(quotewords);
use URI::Escape qw(uri_escape_utf8 uri_unescape);

use File::Copy qw(move);
use File::Path qw(make_path rmtree);
use File::Basename qw(basename dirname);
use File::Spec::Functions qw(catdir catfile tmpdir curdir rel2abs);

my $version  = '1.22';
my $execname = 'trizen';

my $AUR_V = '5';    # current version of AurJson

my $aur_base_url       = 'https://aur.archlinux.org';
my $aur_rpc_base_url   = "$aur_base_url/rpc/?v=2";
my $aur_package_id_url = "$aur_base_url/packages.php?ID=%s";

# Configuration dir/file
my $config_dir = (
                    $ENV{XDG_CONFIG_HOME}
                  ? $ENV{XDG_CONFIG_HOME}
                  : ($ENV{HOME} || $ENV{LOGDIR} || (getpwuid $<)[7] || `echo -n ~`) . '/.config'
                 )
  . "/$execname";

my $config_file = catfile($config_dir, "$execname.conf");
my $user = (getpwuid $<)[0] || substr(`whoami`, 0, -1);
my $arch = substr(`uname -m`, 0, -1);

# UTF-8 output
binmode(STDOUT, ':utf8');

if (not -d $config_dir) {
    make_path($config_dir)
      or warn "[!] Unable to create dir $config_dir: $!";
}

#----------------------- GLOBAL VARIABLES -----------------------#
$ENV{EDITOR} ||= 'nano';

my %CONFIG = (
              VERSION                    => $version,
              show_comments              => 0,
              quiet                      => 0,
              debug                      => 0,
              nocolors                   => 0,
              movepkg                    => 0,
              noedit                     => 0,
              nobuild                    => 0,
              nopull                     => 0,
              noinfo                     => 0,
              skipinteg                  => 0,
              force                      => 0,
              lwp_show_progress          => 0,
              lwp_env_proxy              => 1,
              lwp_timeout                => 60,
              ssl_verify_hostname        => 0,
              packages_in_stats          => 5,
              git_clone_depth            => 0,
              split_packages             => 1,
              recompute_deps             => 1,
              use_sudo                   => ((-x '/usr/bin/sudo') ? 1 : 0),
              su_command                 => '/usr/bin/su -c',
              sudo_command               => '/usr/bin/sudo',
              makepkg_command            => '/usr/bin/makepkg --syncdeps --force --clean',
              movepkg_dir                => '/var/cache/pacman/pkg',
              pacman_local_dir           => '/var/lib/pacman/local',
              pacman_command             => '/usr/bin/pacman',
              clone_dir                  => undef,
              show_build_files_content   => 1,
              aur_results_votes          => 1,
              aur_results_popularity     => 1,
              aur_results_last_modified  => 1,
              aur_results_show_installed => 1,
             );

my %lconfig = (
    %CONFIG,
    devel         => 0,
    needed        => 0,
    noconfirm     => 0,
    aur           => 0,
    search        => 0,
    info          => 0,
    clean         => 0,
    local         => 0,
    pkgbuild      => 0,
    sysupgrade    => 0,
    comments      => 0,
    database      => 0,                         # -D
    files         => 0,                         # -F
    query         => 0,                         # -Q
    remove        => 0,                         # -R
    sync          => 0,                         # -S
    deptest       => 0,                         # -T
    upgrade       => 0,                         # -U
    get           => 0,
    with_deps     => 0,
    maintainer    => 0,
    really_quiet  => 0,
    noinstall     => 0,
    update_config => 0,
    show_ood      => 0,
    asdep         => 0,
    as_root       => $user eq 'root' ? 1 : 0,
    stats         => \&show_stats,
    help          => \&help,
    version       => \&version,
              );

my $config_header = <<"EOH";
#!/usr/bin/perl

# $execname configuration file
# Updated on ${\(scalar localtime)}

EOH

our $CONFIG;

sub dump_configuration ($$) {
    my ($config, $configuration_file) = @_;

    open my $config_fh, '>:utf8', $configuration_file or return;

    require Data::Dump;
    my $dumped_config = q{our $CONFIG = } . Data::Dump::dump($config);
    print $config_fh $config_header, $dumped_config;
    close $config_fh;
}

if (-e $config_file and (-s _) > 1) {
    require $config_file;    # Load the configuration file

    if (ref $CONFIG eq 'HASH') {
        my @valid_keys = grep exists $CONFIG{$_}, keys %{$CONFIG};
        @CONFIG{@valid_keys}  = @{$CONFIG}{@valid_keys};
        @lconfig{@valid_keys} = @{$CONFIG}{@valid_keys};

        if ($CONFIG{VERSION} != $version) {
            $lconfig{update_config} = 1;
            $CONFIG{VERSION}        = $version;
        }
    }
    else {
        warn "[!] Invalid config file! ", ($! || "\$CONFIG must be a HASH ref!\n");
        $lconfig{update_config} = 1;
    }
}
else {
    say "[*] Saving configuration file" if $lconfig{debug};
    dump_configuration(\%CONFIG, $config_file) or warn "[!] Cannot open $config_file for write: $!";
}

$lconfig{clone_dir} = ($CONFIG{clone_dir} //= catdir(tmpdir(), "$execname-$user"));

if (not -d $lconfig{clone_dir}) {
    make_path($lconfig{clone_dir})
      or die "[x] Unable to create dir $lconfig{clone_dir}: $!";
}

my $short_arguments = 'TDFCUNQRSGbcdefghiklmnopqrstuvwy';

my @package_suffices = qw (
  .tar.7z
  .tar.Z
  .tar.bz2
  .tar.gz
  .tar.lrz
  .tar.lz
  .tar.lzma
  .tar.lzo
  .tar.xz
  .tgz
  .xz
  .7z
  .bz2
  .gz
  .lzma
  .lzo
  .tar
  .zip
  );

my %already_built;        # will keep track of built packages
my %already_installed;    # will keep track of installed packages
my %seen_package;         # will keep track of seen packages

my $pkg_suffices = join('|', map { quotemeta } @package_suffices);
my $pkg_suffix_re = qr/-[^-]+-\d+-\w+\.pkg(?:$pkg_suffices)\z/o;

# Subroutine prototypes
sub install_package ($);
sub move_built_package($);

# Main quit
sub main_quit () {
    if ($lconfig{update_config}) {
        dump_configuration(\%CONFIG, $config_file);
    }
    exit($? >> 8);
}

#----------------------- COLORS -----------------------#
my %c;
$c{cblack}  = "\e[40m";                # background black
$c{byellow} = "\e[1;33m";              # bold yellow
$c{bpurple} = "\e[1;35m";              # bold purple
$c{bblue}   = "\e[1;34m";              # bold blue
$c{bold}    = "\e[1m";                 # bold terminal color
$c{bred}    = "\e[1;31m";              # bold red
$c{bgreen}  = "$c{cblack}\e[1;32m";    # bold green on black background
$c{reset}   = "\e[0m";                 # reset color

require Encode;
@ARGV = map { Encode::decode_utf8($_) } @ARGV;

if ('--nocolors' ~~ \@ARGV) {
    %c = map { $_ => q{} } keys %c;
}

#----------------------- USAGE -----------------------#
sub help () {
    print <<"HELP";
\n========================= $c{bgreen}Trizen's AUR Package Manager$c{reset} =========================
                                                            by trizenx\@gmail.com
\n$c{bold}usage:$c{reset} $execname [option] [pkgname] [pkgname] [...]
\n$c{bgreen}Main options:$c{reset}
    -S              : installs package
    -Ss             : searches for package
    -Si             : outputs info for package
    -Sm             : outputs the packages maintained by [...]
    -Sp             : outputs PKGBUILD only
    -Sl             : builds and installs package from `pwd`
    -Su             : upgrades installed packages
    -Sc             : clears the cache directory
    -C              : shows AUR comments for package
    -G              : clones a package in the current directory
    -Gd             : clones a package with all needed AUR dependencies
    -R              : removes packages (see pacman -Rh)
    -Q              : for installed packages (see pacman -Qh)
    -U              : installs local packages from $lconfig{clone_dir} or `pwd`
\n$c{bgreen}Other options:$c{reset}
    --quiet         : be quiet
    --really-quiet  : be really quiet
    --nocolors      : no text colors
    --aur           : only AUR packages (with -S, -Si, -Su, -Ss)
    --asdep         : installs package as dependency
    --movepkg       : move the built package to the pacman cache directory
    --needed        : do not reinstall up-to-date packages
    --noedit        : do not prompt to edit files
    --nopull        : do not `git pull` new changes
    --nobuild       : do not build packages (implies --noedit)
    --noinstall     : do not install package after building
    --noinfo        : do not display package info after cloning
    --devel         : update devel packages during -Su
    --show-ood      : show out-of-date flagged packages during -Su
    --noconfirm     : do not ask for any confirmation
    --force         : pass the --force option to pacman
    --skipinteg     : pass the --skipinteg option to makepkg
    --stats         : show some info about the installed packages
    --update-config : update configuration file before exit
    --clone-dir=s   : directory where to clone and build packages
    --movepkg-dir=s : move built packages in this directory (with --movepkg)
\n$c{bgreen}Meta options:$c{reset}
    --debug         : activate verbose mode
    --help          : print this message and exit
    --version       : print version and exit\n
$c{bred}\[*]$c{reset} Each config-key is a valid option when preceded with '--'
$c{bred}\[*]$c{reset} Configuration file: $config_file
HELP
    main_quit();
}

@ARGV or help();

sub version () {
    say "$execname $version";
    main_quit();
}

#----------------------- PARSING ARGUMENTS -----------------------#
sub parse_long_arguments (@) {
    Getopt::Long::GetOptionsFromArray(
        \@_,
        \%lconfig,
        map {
                (defined($lconfig{$_}) and $lconfig{$_} =~ /^[01]\z/) ? "$_!"
              : ref($lconfig{$_}) ? $_
              : "$_=s"
          } keys %lconfig,
    );
}

my @left_over_arguments;
{
    my @long_arguments;
    foreach my $arg (@ARGV) {
        given ($arg) {
            when (/^--(\w.*)/) {
                my $option = $1 =~ tr/-/_/r;
                if (exists $lconfig{$option}) {
                    push @long_arguments, "--$option";
                }
                else {
                    my $negated = $option =~ s/^no_?//r;
                    if (exists $lconfig{$negated}) {
                        if ($lconfig{$negated}) {
                            $lconfig{$negated} = 0;
                        }
                    }
                    elsif ($arg =~ /.=/) {
                        my ($argument, $value) = $option =~ /^(.*?)=(.*)/;
                        if (exists $lconfig{$argument}) {
                            $lconfig{$argument} = $value;
                        }
                        else {
                            ##warn "[!] Invalid option <<$arg>>\n";
                            continue;
                        }
                    }
                    else {
                        ##warn "[!] Invalid option <<$arg>>\n";
                        continue;
                    }
                }
            }
            default {
                push @left_over_arguments, $arg;
            }
        }
    }

    if (@long_arguments) {
        require Getopt::Long;
        Getopt::Long::Configure('no_ignore_case');
        parse_long_arguments(@long_arguments);
    }
}

sub parse_short_arguments () {
    getopts($short_arguments, \%lconfig);
}

{
    my @short_arguments = grep { /^-[$short_arguments]/ } @ARGV;
    if (@short_arguments) {
        local @ARGV = @short_arguments;
        parse_short_arguments();
    }
}

my @pacman_arguments;

# Makepkg
if ($lconfig{as_root}) {
    warn "$c{bred}\[!] You are running '${execname}' as root!$c{reset}\n" if $lconfig{S};
    $lconfig{makepkg_command} .= ' --asroot';
}

if ($lconfig{skipinteg}) {
    $lconfig{makepkg_command} .= ' --skipinteg';
}

# Pacman
if ($lconfig{needed}) {
    push @pacman_arguments, '--needed';
}

if ($lconfig{quiet} or $lconfig{q}) {
    push @pacman_arguments, '--quiet';
}

if ($lconfig{force}) {
    push @pacman_arguments, '--force';
}

if ($lconfig{noconfirm}) {
    $Term::UI::AUTOREPLY = 1;
    push @pacman_arguments, '--noconfirm';
    $lconfig{makepkg_command} .= ' --noconfirm';
}
else {
    $Term::UI::AUTOREPLY = 0;
}

# Others
if ($lconfig{q}) {
    $lconfig{quiet} = 1;
}

if ($lconfig{debug}) {
    $lconfig{lwp_show_progress} = 1;
}

if ($lconfig{quiet}) {
    close STDERR;
}

if ($lconfig{really_quiet}) {
    close STDOUT;
    close STDERR;
    $lconfig{quiet} = 1;
}

if ($lconfig{nocolors}) {
    %c = map { $_ => q{} } keys %c;
}

if ($lconfig{movepkg}) {
    $lconfig{movepkg_dir} = rel2abs($lconfig{movepkg_dir});
}

if ($lconfig{h}) {
    help();
}

if ($lconfig{nobuild}) {
    $lconfig{noedit}         = 1;
    $lconfig{recompute_deps} = 0;
}

$lconfig{clone_dir} = rel2abs($lconfig{clone_dir});

if (not -d $lconfig{clone_dir}) {
    make_path($lconfig{clone_dir})
      or die "[x] Unable to create dir $lconfig{clone_dir}: $!";
}

#----------------------- WORK AREA -----------------------#

# Run-time loaded modules
require Term::UI;
require Term::ReadLine;
require LWP::UserAgent;
require HTTP::Message;

# Initializing module objects
my $term = Term::ReadLine->new("$execname $version");

my $lwp = LWP::UserAgent->new(
                              env_proxy     => $lconfig{lwp_env_proxy},
                              show_progress => $lconfig{lwp_show_progress},
                              timeout       => $lconfig{lwp_timeout},
                              ssl_opts      => {verify_hostname => $lconfig{ssl_verify_hostname}},
                              agent         => "Mozilla/5.0 (CLI; U; gzip; en-US) $execname/$version",
                             );

sub json2perl ($) {
    require JSON;
    JSON::from_json($_[0]);
}

sub get ($) {
    my ($url) = @_;

    state $accepted_encodings = HTTP::Message::decodable();

    my $response = $lwp->get($url, 'Accept-Encoding' => $accepted_encodings);

    if ($response->is_success) {
        my $content = $response->decoded_content;

        if (not defined $content) {
            warn "[ERROR]: $@\n";
            return;
        }

        return $content;
    }

    return;
}

sub mirror ($$) {
    return $lwp->mirror(@_);
}

sub get_non_arguments_from_array (@) {
    return grep { chr ord ne '-' } @_;
}

sub get_comments ($) {
    my ($id) = @_;

    $id // return;
    $id =~ /^\d+\z/ or return;

    my $url = sprintf($aur_package_id_url, $id);
    my $content = get($url) // return;

    require HTML::Entities;

    my @comments;
    while (
        $content =~ m{
            <h4\b.*?>\s*
                (\S(?-s:.*?))\ commented\ on\ (\d\d\d\d-\d\d-\d\d\ \d\d:\d\d)
         \s*</h4>\s*
        <div\s+class="article-content">\s*
            <p>\s*(.*?)\s*</p>\s*
        </div>
        }gsix
      ) {

        my $author  = $1;
        my $date    = $2;
        my $comment = $3;

        $comment =~ s{<.*?>}{}gs;
        $author =~ s{<.*?>}{}gs;
        $comment = HTML::Entities::decode_entities($comment);
        $comment =~ s/\h{2,}/ /g;

        unshift @comments, <<"EOC"
$c{cblack}$c{byellow}Comment by: $c{bgreen}$author$c{reset}$c{cblack}$c{byellow} on $date$c{reset}
$comment
EOC
    }
    return @comments;
}

sub execute_pacman_command (@) {
    my $needs_root = shift;

    my $pacman_command = join(
        q{ },
        do {
            my %seen;
            grep { !$seen{$_}++ } map { quotemeta } $lconfig{pacman_command}, @pacman_arguments, @_;
          }
    );

    my $user_pacman_command =
        $needs_root
      ? $lconfig{use_sudo}
          ? "$lconfig{sudo_command} $pacman_command"
          : qq{$lconfig{su_command} "$pacman_command"}
      : $pacman_command;

    say "[*] Pacman command: $pacman_command" if $lconfig{debug};
    {
        system $lconfig{as_root} ? $pacman_command : $user_pacman_command;
        if ($? and $needs_root) {
            (say "[*] Exit code: ", $? >> 8) if $lconfig{debug};
            $term->ask_yn(prompt => "=>> Try again?", default => 'n') and redo;
        }
    }
    return $? ? 0 : 1;
}

sub is_available_in_pacman_repo (@) {
    (@_ = grep { defined($_) && /^\w/ } @_) || return;
    system "/usr/bin/pacman -Sp @_ &> /dev/null";
    my $exit_code = $?;
    $? = 0;
    return $exit_code ? 0 : 1;
}

sub package_is_installed ($) {
    my ($pkg) = @_;
    my $regex = qr{^\Q$pkg\E-([^-]+-\d+)\z};

    opendir(my $dir_h, $lconfig{pacman_local_dir}) or return;

    while (defined(my $dir = readdir($dir_h))) {
        if ($dir =~ $regex) {
            closedir $dir_h;
            return $1;
        }
    }

    closedir $dir_h;
    return;
}

sub versioncmp ($$) {

    # Code from Sort::Versions
    # http://search.cpan.org/~edavis/Sort-Versions-1.5/Versions.pm

    my (@A) = $_[0] =~ /([-.]|\d+|[^-.\d]+)/g;
    my (@B) = $_[1] =~ /([-.]|\d+|[^-.\d]+)/g;

    my ($A, $B);
    while (@A and @B) {
        $A = shift @A;
        $B = shift @B;

        if ($A eq q{-} and $B eq q{-}) {
            next;
        }
        elsif ($A eq q{-}) {
            return -1;
        }
        elsif ($B eq q{-}) {
            return 1;
        }
        elsif ($A eq q{.} and $B eq q{.}) {
            next;
        }
        elsif ($A eq q{.}) {
            return -1;
        }
        elsif ($B eq q{.}) {
            return 1;
        }
        elsif ($A =~ /^\d+$/ and $B =~ /^\d+$/) {
            if ($A =~ /^0/ or $B =~ /^0/) {
                return $A cmp $B if $A cmp $B;
            }
            else {
                return $A <=> $B if $A <=> $B;
            }
        }
        else {
            $A = uc $A;
            $B = uc $B;
            return $A cmp $B if $A cmp $B;
        }
    }
    return @A <=> @B;
}

sub array_ref_or_string (@) {
    my ($data) = @_;
    return ref $data eq 'ARRAY' ? grep { defined($_) && $_ ne q{} } @{$data} : $data // 'None';
}

sub strip_space ($) {
    my ($string) = @_;
    $string // return q{};
    $string =~ s/^\s+//;
    return unpack 'A*', $string;
}

sub strip_version ($) {
    my ($version) = @_;
    $version =~ s/\s*[<=>]=?.+//sg;
    return strip_space($version);
}

sub parse_package_name_and_version ($) {
    my ($pkgname) = @_;

    if ($pkgname =~ /^(.*?)([<=>]=?)(.*)/) {
        return ($1, $2, $3);
    }

    return ($pkgname, undef, undef);
}

sub indent_array (@) {
    my $first = strip_space(shift);

    @_ or return $first;

    my $rest = join "\n", @_;
    $rest =~ s/^\s+//gm;
    $rest =~ s/^/' ' x 17/gem;

    return "$first\n$rest";
}

sub info_for_package ($) {
    my ($pkg) = @_;

    my $info = get_rpc_info($pkg) // return;

    if (ref($info->{results}) ne 'ARRAY') {
        warn "[!] Unable to get info for package: $pkg\n" if $lconfig{debug};
        return;
    }

    $info->{resultcount} > 0 or return;

    if ($info->{resultcount} > 1) {
        print "$c{bold}\[*] Found $c{reset}$c{bgreen}$info->{resultcount}$c{reset}$c{bold} packages.$c{reset}\n";
        my @packages = map { $_->{Name} } @{$info->{results}};
        my %table = (map { $packages[$_] => $_ } 0 .. $#packages);
        my $reply = $term->get_reply(
                                     print_me => "\n=>> Select which packages to install",
                                     prompt   => 'Select',
                                     choices  => \@packages,
                                     default  => $packages[0],
                                    );
        $info = $info->{results}[$table{$reply}];
    }
    else {
        $info = $info->{results}[0];
    }

    $info;
}

sub download_package ($$) {
    my ($pkg, $path) = @_;

    my $info = info_for_package($pkg) // return;

    my $pkg_base = $info->{PackageBase};
    my $git_url  = "$aur_base_url/$pkg_base.git";
    my $dir_name = rel2abs(catdir($path, $pkg_base));

    if (-d $dir_name) {
        my $pkgbuild_prev = catfile($dir_name, '.git', '.PKGBUILD');
        my $pkgbuild_curr = catfile($dir_name, 'PKGBUILD');

        my $old_pkgbuild_content = do {
            if (open my $fh, '<', $pkgbuild_curr) {
                local $/;
                <$fh>;
            }
            else {
                undef;
            }
        };

        if (!$lconfig{nopull}) {
#<<<
            system('/usr/bin/git', '-C', $dir_name, 'reset', '--hard', 'HEAD', ($lconfig{quiet} ? ('-q') : ())) && return;
            system('/usr/bin/git', '-C', $dir_name, 'pull', '--ff',            ($lconfig{quiet} ? ('-q') : ())) && return;
#>>>
        }

        if (defined($old_pkgbuild_content)
            and open(my $fh, '>', $pkgbuild_prev)) {
            print {$fh} $old_pkgbuild_content;
            close $fh;

            chomp(my $diff = `/usr/bin/diff --color=always -w -B -a -d \Q$pkgbuild_prev\E \Q$pkgbuild_curr\E`);

            if ($diff ne '') {
                say "\n$c{bold}\[*] PKGBUILD diff for$c{reset} $c{bgreen}$info->{Name}$c{reset}";
                say Encode::decode_utf8($diff);
            }
        }
    }
    else {
        system('/usr/bin/git', '-C', $path, 'clone',
               ($lconfig{git_clone_depth} > 0 ? "--depth=$lconfig{git_clone_depth}" : ()),
               ($lconfig{quiet} ? ('-q') : ()), $git_url)
          && return;
    }

    if ($lconfig{debug}) {
        say "[*] Changing directory to: $path";
    }

    chdir($path) or do { warn "[!] Unable to chdir() to $path: $!"; return };

    if ($lconfig{debug}) {
        say "[*] Trying to change directory to: $dir_name";
    }

    $info->{_localpath} = $dir_name;    # directory that contains the PKGBUILD

    if (-d $dir_name) {
        chdir $dir_name or do { warn "[!] Unable to chdir() to $dir_name: $!"; return };
        say "[*] Changed directory successfully to: $dir_name" if $lconfig{debug};
    }

    return $info;
}

sub get_rpc_info ($) {
    my ($pkg) = @_;
    return json2perl(get("$aur_rpc_base_url?v=$AUR_V&type=info&arg=" . uri_escape_utf8($pkg)) // return);
}

sub show_info ($) {
    my ($info) = @_;

    say map { sprintf $c{bold} . $_->[0], $c{reset} . $_->[1] }
      ["Name           : %s\n", "$c{bold}$info->{Name}$c{reset}"],
      ["Version        : %s\n", $info->{Version} // 'Unknown'],
      ["Maintainer     : %s\n", $info->{Maintainer} // "$c{bred}None$c{reset}"],
      ["URL            : %s\n", $info->{URL}],
      ["AUR URL        : %s\n", sprintf($aur_package_id_url, $info->{ID})],
      ["License        : %s\n", indent_array(array_ref_or_string($info->{License}))],
      ["Votes          : %s\n", $info->{NumVotes}],
      ["Popularity     : %s\n", $info->{Popularity}],
      ["Installed      : %s\n", package_is_installed($info->{Name}) ? "$c{bgreen}Yes$c{reset}" : 'No'],
      ["Out Of Date    : %s\n", $info->{OutOfDate} ? "$c{bred}Yes$c{reset}" : 'No'],
      ["Depends On     : %s\n", indent_array(array_ref_or_string($info->{Depends}))],
      ["Make Deps      : %s\n", indent_array(array_ref_or_string($info->{MakeDepends}))],
      ["Check Deps     : %s\n", indent_array(array_ref_or_string($info->{CheckDepends}))],
      ["Optional Deps  : %s\n", indent_array(array_ref_or_string($info->{OptDepends}))],
      ["Provides       : %s\n", indent_array(array_ref_or_string($info->{Provides}))],
      ["Conflicts With : %s\n", indent_array(array_ref_or_string($info->{Conflicts}))],
      ["Replaces       : %s\n", indent_array(array_ref_or_string($info->{Replaces}))],
      ["Package Base   : %s\n", $info->{PackageBase}],
      ["Last Update    : %s\n", scalar localtime($info->{LastModified} || $info->{FirstSubmitted})],
      ["Description    : %s\n", $info->{Description}];

    return 1;
}

sub find_local_package ($$) {
    my ($pkg, $dir) = @_;

    my $newest_package;

    opendir(my $dir_h, $dir)
      or do { warn "[!] Unable to open dir $dir: $!"; return };

    while (defined(my $file = readdir $dir_h)) {
        if ($file =~ m{^\Q$pkg\E$pkg_suffix_re}) {

            # When exists more than one packages built,
            # get the newest version available
            if (defined $newest_package) {
                my ($new_version) = $file =~ /($pkg_suffix_re)/o;
                my ($old_version) = $newest_package =~ /($pkg_suffix_re)/o;
                $newest_package = "$dir/$file" if versioncmp($old_version, $new_version) == -1;
            }

            # When $newest_package is undefined,
            # assign the first package found
            else {
                $newest_package = "$dir/$file";
            }
        }
    }

    closedir $dir_h;
    return $newest_package if defined $newest_package;
    return;
}

sub base_package_name ($) {
    my $pkg = basename(shift);
    $pkg =~ s/$pkg_suffix_re//o;
    return $pkg;
}

sub move_built_package ($) {
    my ($pkg) = @_;
    my $pkg_tarball = find_local_package($pkg, rel2abs(curdir())) or return;

    if (not -d $lconfig{movepkg_dir}) {
        make_path($lconfig{movepkg_dir}) or warn "[!] Unable to create $lconfig{movepkg_dir}: $!";
    }
    if (-d $lconfig{movepkg_dir}) {
        if (-w _) {
            say "[*] Moving $pkg_tarball into $lconfig{movepkg_dir}" if $lconfig{debug};
            move($pkg_tarball, catfile($lconfig{movepkg_dir}, basename($pkg_tarball)))
              or warn "[!] Unable to move $pkg into $lconfig{movepkg_dir}: $!";
        }
        else {
            say "[*] Moving `${pkg_tarball}' into `$lconfig{movepkg_dir}'";

            system $lconfig{use_sudo}
              ? "$lconfig{sudo_command} mv '${pkg_tarball}' '$lconfig{movepkg_dir}'"
              : qq{$lconfig{su_command} 'mv \Q$pkg_tarball\E \Q$lconfig{movepkg_dir}\E'};

            if ($?) {
                warn "[!] Unable to move package `$pkg' into `$lconfig{movepkg_dir}' -- exit code: ", $? >> 8, "\n";
                if ($term->ask_yn(prompt => "=>> Do you want to try again?", default => 'n')) {
                    move_built_package($pkg);
                }
            }
            else {
                say "[*] Package `$pkg' has been successfully moved into `$lconfig{movepkg_dir}'.";
            }
        }
    }
}

sub output_file_content ($) {
    my ($file) = @_;

    local $/ = undef;
    open my $fh, '<:utf8', $file or do { warn "[!] Unable to open $file for read: $!"; return };
    say "\n$c{bold}=>> Content of$c{reset} $c{bgreen}$file$c{reset}";
    eval { print <$fh> };
    $@ && return;
    close $fh;

    return 1;
}

sub recompute_dependencies ($) {
    my ($info) = @_;

    say "[*] Recomputing dependencies..." if $lconfig{debug};

    my @srcinfo = map { Encode::decode_utf8($_) } `/usr/bin/makepkg --printsrcinfo`;

    if ($?) {
        warn "[!] `makepkg --printsrcinfo` exited with code: ", $? >> 8, "\n";
        return;
    }

    my %data;
    foreach my $line (@srcinfo) {
        if ($line =~ /^\s*(\w+)\s*=\s*(.*\S)/) {
            my ($key, $value) = ($1, $2);

            # Build the package (again)
            if ($key eq 'pkgname') {
                $already_built{$value} = 0;
            }

            push @{$data{$key}}, $value;
        }
    }

    my %pairs = (
                 Depends      => 'depends',
                 License      => 'license',
                 MakeDepends  => 'makedepends',
                 OptDepends   => 'optdepends',
                 Provides     => 'provides',
                 Conflicts    => 'conflicts',
                 CheckDepends => 'checkdepends',
                );

    while (my ($key1, $key2) = each %pairs) {
        $info->{$key1} = $data{$key2};
    }

    return 1;
}

sub edit_text_files ($) {
    my ($info) = @_;

    my $edited = 0;
    foreach my $file (sort grep { -f and not -z _ } glob('*')) {

        next if substr($file, -1) eq q{~};       # ignore backup (~) files
        next if substr($file, -4) eq q{.bak};    # ignore backup (.bak) files
        next if chr ord $file eq q{.};           # ignore hidden files

        next
          if ((-s $file) > 50 * 1024 or not -T _)
          and not $file ~~ ['PKGBUILD', qr/(?:^|\.)install\z/];    # ignore files larger than 50 KB

        if ($lconfig{show_build_files_content}) {
            output_file_content($file);
        }

        if ($term->ask_yn(prompt => "=>> Do you want to edit $file?", default => 'n')) {
            my $abs_file = rel2abs($file);
            system $ENV{EDITOR}, $abs_file;
            $edited ||= 1;

            if ($?) {
                warn "[!] $ENV{EDITOR} exited with code: ", $? >> 8, "\n";
                return;
            }
        }
    }

    return 1;
}

sub run_makepkg_command ($@) {
    my ($pkg, @args) = @_;
    system join(' ', $lconfig{makepkg_command}, @args);
    if ($?) {
        warn "[!] Unable to build '$pkg' - makepkg exited with code: ", $? >> 8, "\n";
        if ($term->ask_yn(prompt => "=>> Do you want to try again?", default => 'n')) {
            local $lconfig{nopull} = 1;
            delete $seen_package{$pkg};
            install_package($pkg);
        }
        else {
            if ($term->ask_yn(prompt => "=>> Do you want to exit now?", default => 'y')) {
                exit 65;    # Package not installed
            }
            else {
                return;
            }
        }
    }
    return 1;
}

sub install_local_package (@) {
    my ($pkg, @pacman_argvs) = @_;

    my $pkg_tarball = find_local_package($pkg, rel2abs(curdir()))
      or do {
        warn "[!] Unable to find a built tarball for $pkg\n";
        $? = 2 << 8;
        return;
      };

    if ($lconfig{noinstall}) {
        if ($lconfig{movepkg}) {
            move_built_package($pkg);
            return 1;
        }
        return 1;
    }

    return 1 if $already_installed{$pkg};

    if (execute_pacman_command(1, $pkg_tarball, @pacman_argvs)) {
        $already_installed{$pkg} = 1;
        if ($lconfig{movepkg}) {
            move_built_package($pkg);
        }
        return 1;
    }

    return;
}

sub install_built_package ($@) {
    my ($pkg, @args) = @_;

    # Install the package
    install_local_package($pkg, q{-U}, @args) || return;

    # Don't ask for split packages in `--noinstall` mode
    # or when `split_packages` is set to a false value.
    ($lconfig{noinstall} || !$lconfig{split_packages}) && return 1;

    # Get the list of all built packages
    chomp(my @packagelist = map { Encode::decode_utf8($_) } `/usr/bin/makepkg --packagelist`);

    my @packages;
    foreach my $name (@packagelist) {
        if ("$name.pkg.tar.gz" =~ /^(.*?)$pkg_suffix_re/o) {
            my $basename = $1;
            next if $basename eq $pkg;
            $already_built{$basename} = 1;
            push @packages, $basename;
        }
    }

    @packages = do {
        my %seen;
        grep { !$seen{$_}++ } @packages;
    };

    # If the list contains more built packages, then ask the user
    # if he wants to install some other packages from this group.
    if (@packages) {

        say "\n=> This group contains ", scalar(@packages), " more packages:\n";
        say join("\n", map { "\t$_" } @packages), "\n";

        if (
            $term->ask_yn(prompt  => '=>> Do you want to install more packages from this group?',
                          default => 'n')
          ) {
            my @reply = $term->get_reply(
                                         print_me => "\n=>> Select which packages to install",
                                         prompt   => 'Install',
                                         choices  => \@packages,
                                         default  => \@packages,
                                         multi    => 1,
                                        );

            # Install the selected packages
            foreach my $name (@reply) {
                install_local_package($name, q{-U}, @args);
            }
        }
    }

    return 1;
}

sub build_and_install_package ($@) {
    my ($pkg, @args) = @_;

    if ($lconfig{nobuild}) {
        if ($lconfig{noinstall}) {
            $already_installed{$pkg} = 1;
            return 1;
        }
        $already_built{$pkg} = 1;
        return install_built_package($pkg, @args);
    }

    # Check to see if the current package was
    # already built, so we don't build it twice.
    if ($already_built{$pkg}) {
        return install_built_package($pkg, @args);
    }

    #
    ## Concept for installing packages directly with `makepkg`.
    ## However, this concept cannot install individual parts of a split package.
    ## See: https://github.com/trizen/trizen/issues/6
    #
#<<<
    #~ if (not $lconfig{noinstall}) {
        #~ push @args, '--install';
    #~ }

    #~ if ($lconfig{noconfirm}) {
        #~ push @args, '--noconfirm';
    #~ }

    #~ if ($lconfig{needed}) {
        #~ push @args, '--needed';
    #~ }

    #~ if (run_makepkg_command($pkg, @args)) {
        #~ $already_built{$pkg} = 1;
        #~ move_built_package($pkg) if $lconfig{movepkg};
        #~ return 1;
    #~ }
#>>>

    # Build the package and install/move it
    if (run_makepkg_command($pkg)) {
        $already_built{$pkg} = 1;    # mark the package as built
        return install_built_package($pkg, @args);
    }

    return;
}

sub _is_lib32 ($) {
    my ($pkg) = @_;
    if ($arch ne 'x86_64') {
        return 1 if $pkg =~ /^lib32-\w/;
    }
    return;
}

sub install_as_dep ($) {
    my ($pkg) = @_;
    say "[*] Installing the following package as dependency: $pkg" if $lconfig{debug};
    build_and_install_package($pkg, '--asdeps') and return 1;
    return;
}

sub install_as_explicit ($) {
    my ($pkg) = @_;
    say "[*] Installing the following package as explicit: $pkg" if $lconfig{debug};
    build_and_install_package($pkg, '--asexplicit') and return 1;
    return;
}

sub install_package ($) {
    my ($pkg) = @_;

    # Avoid circular dependencies
    if ($seen_package{$pkg}) {
        return 1;
    }

    # Mark as seen
    local $seen_package{$pkg} = 1;

    say "[*] Current dir is: ", rel2abs(curdir()) if $lconfig{debug};

    my $info = download_package($pkg, $lconfig{clone_dir});
    if (ref($info) eq 'HASH') {
        say "[*] Package `$pkg' is found in AUR!" if $lconfig{debug};
    }
    elsif (not($lconfig{aur}) and is_available_in_pacman_repo($pkg)) {
        execute_pacman_command(1, qw(-S), (grep { /^--./ } @left_over_arguments), $pkg) and return 1;
        return;
    }
    else {
        warn "[!] Package not found: $pkg\n";
        $? = 1 << 8;
        return;
    }

    if (my $version = package_is_installed($pkg)) {
        say "[*] Package `$pkg' is already installed!" if $lconfig{debug};
        if ($lconfig{needed}) {
            if (versioncmp($version, $info->{Version}) >= 0) {
                return 1;    # package is installed and up-to-date
            }
            else {
                say "[*] Package `$pkg' is NOT up-to-date!" if $lconfig{debug};
            }
        }
    }

    say "\n$c{bold}\[*] Package:$c{reset} $c{bgreen}$info->{Name}$c{reset}";
    say "$c{bold}\[*] AUR URL:$c{reset} ", sprintf($aur_package_id_url, $info->{ID});

    # When a package is already built, install it without building it again.
    if ($already_built{$pkg}) {
        if (defined($lconfig{main_pkg}) and $pkg eq $lconfig{main_pkg}) {
            return install_built_package($pkg, $lconfig{asdep} ? '--asdeps' : '--asexplicit');
        }
        else {
            return install_built_package($pkg, '--asdeps');
        }
    }

    if ($lconfig{show_comments}) {
        print "\n";
        foreach my $comment (get_comments($info->{ID})) {
            say $comment;
        }
    }

    # Edit PKGBUILD and other -T files
    if (not $lconfig{noedit}) {
        edit_text_files($info);
    }

    if ($lconfig{recompute_deps}) {
        recompute_dependencies($info);
    }

    if (not $lconfig{noinfo}) {
        print "\n";
        show_info($info) or return;
    }

    foreach my $pkgname (
        grep { defined($_) && /^\w/ }

        # Makedepends
        (exists($info->{MakeDepends}) ? @{$info->{MakeDepends}} : ()),

        # Depends
        (exists($info->{Depends}) ? @{$info->{Depends}} : ()),
      ) {

        my ($name, $cmp, $version) = parse_package_name_and_version($pkgname);

        if (_is_lib32($name)) {
            say "[*] Ignoring lib32-* package arch '$arch': $name" if $lconfig{debug};
            next;
        }

        my $is_up_to_date = 0;
        my $local_version = package_is_installed($name);

        if (defined($local_version) and defined($version)) {
            if ($cmp eq '<') {
                if (versioncmp($local_version, $version) < 0) {
                    $is_up_to_date = 1;
                }
            }
            elsif ($cmp eq '<=') {
                if (versioncmp($local_version, $version) <= 0) {
                    $is_up_to_date = 1;
                }
            }
            elsif ($cmp eq '>') {
                if (versioncmp($local_version, $version) > 0) {
                    $is_up_to_date = 1;
                }
            }
            elsif ($cmp eq '>=') {
                if (versioncmp($local_version, $version) >= 0) {
                    $is_up_to_date = 1;
                }
            }
            elsif ($cmp eq '=' or $cmp eq '==') {
                if (versioncmp($local_version, $version) == 0) {
                    $is_up_to_date = 1;
                }
            }
        }

        if ($already_installed{$name} or (defined($local_version) ? defined($version) ? $is_up_to_date : 1 : 0)) {
            say "[*] Skipping package $name - already installed!" if $lconfig{debug};
        }
        elsif (is_available_in_pacman_repo($name)) {
            say "[*] Package $name is available in pacman's repository!" if $lconfig{debug};
        }
        else {
            say "[*] Trying to install package: $name" if $lconfig{debug};
            install_package($name) or do { warn "[!] Dependency not found: $name\n"; next };
        }
    }

    chdir($info->{_localpath});
    say "[*] Current dir is: ", rel2abs(curdir()) if $lconfig{debug};

    if (    not $lconfig{asdep}
        and defined($lconfig{main_pkg})
        and $pkg eq $lconfig{main_pkg}) {    # install as explicit
        install_as_explicit($pkg) and return 1;
    }
    else {                                   # install as dependency
        install_as_dep($pkg) and return 1;
    }

    return;
}

sub clear_cache () {
    if ($lconfig{clone_dir} !~ m{^/tmp/}) {
        $term->ask_yn(prompt => "[*] Remove directory $c{bold}$lconfig{clone_dir}$c{reset}?", default => 'n') || return;
    }
    say "[*] Removing $c{bold}$lconfig{clone_dir}$c{reset}...";
    rmtree($lconfig{clone_dir}) or die "error: $!";
    say "[*] Done!";
    main_quit();
}

sub print_aur_results (\@) {
    my ($array_ref) = @_;
    foreach my $result (sort { $a->{Name} cmp $b->{Name} } @{$array_ref}) {
        if ($lconfig{quiet}) {
            say $result->{Name};
        }
        else {
            # Compare installed version with AUR version
            my $is_installed_string = $lconfig{aur_results_show_installed}
              ? do {
                my $installed_version = package_is_installed($result->{Name});

                defined($installed_version)
                  ? versioncmp($installed_version, $result->{Version}) >= 0
                      ? " [$c{bold}installed$c{reset}]"
                      : " [$c{bold}installed$c{reset}: $c{bred}$installed_version$c{reset}]"
                  : q{};
              }
              : q{};

            # Formatting string
            my $result_string = "$c{bpurple}aur$c{reset}/$c{bold}%s$c{reset} %s%s%s%s%s%s%s\n    %s\n";

#<<<
            # Print formatted output
            printf $result_string,
              $result->{Name},
              $result->{Version},
              $is_installed_string,
              ($result->{OutOfDate}             ? " [$c{bred}out-of-date$c{reset}]"          : q{}),
              ($result->{Maintainer}            ? q{}                                        : " [$c{bred}UNMAINTAINED$c{reset}]"),
              ($lconfig{aur_results_votes}      ? " [$c{bold}$result->{NumVotes}+$c{reset}]" : q{}),
              ($lconfig{aur_results_popularity} ? " [$result->{Popularity}]"                 : q{}),
              (
                $lconfig{aur_results_last_modified}
                ? localtime($result->{LastModified}) =~ /^\w+ (\w+)\s+(\d+)\s+.+? (\d+)$/ && " [$2 $1 $3]"
                : q{}
              ),
              ($result->{Description} // 'No description available...'),
            ;
#>>>
        }
    }
    return 1;
}

sub search_aur_packages (@) {
    my (@keys) = @_;

    if (not $lconfig{aur}) {
        execute_pacman_command(0, qw(-Ss), @keys);
    }

    my @all_results;
    foreach my $key (map { uri_escape_utf8($_) } grep { length() > 1 } @keys) {
        push @all_results, json2perl(get("$aur_rpc_base_url?v=$AUR_V&type=search&arg=$key") // next);
    }

    my @keys_re = map { qr/\Q$_\E/i } @keys;
    my %seen;

    my @matched_results;
    foreach my $results (@all_results) {

        ref $results->{results} eq 'ARRAY' or next;

      LOOP_2: foreach my $result (@{$results->{results}}) {
            next if $seen{$result->{Name}}++;
            foreach my $key_re (@keys_re) {
                if (    not(($result->{Name} // '') =~ $key_re)
                    and not(($result->{Description} // '') =~ $key_re)) {
                    next LOOP_2;
                }
            }
            push @matched_results, $result;
        }
    }
    $? = 0 if @matched_results;
    print_aur_results(@matched_results) or return;
    return 1;
}

sub list_aur_maintainer_packages ($) {
    my ($maintainer) = @_;
    my $results = json2perl(get("$aur_rpc_base_url?v=$AUR_V&type=msearch&arg=$maintainer") // return);
    ref($results->{results}) eq 'ARRAY' or return;
    (my @maintainers_packages = @{$results->{results}}) || return;
    print_aur_results(@maintainers_packages) or return;
    return 1;
}

sub update_local_packages () {
    if (not $lconfig{aur}) {
        execute_pacman_command(1, qw(-Syu));
    }

    my %packages;
    open my $pipe_h, '-|:utf8', '/usr/bin/pacman', '-Qm';
    while (defined(my $line = <$pipe_h>)) {
        my ($package, $version) = split(' ', $line);
        $packages{$package} = $version;
    }
    close $pipe_h;

    my $info_request = join('&', map { "arg[]=$_" } map { uri_escape_utf8($_) } sort keys %packages);

    my $multiinfo = json2perl(
        get("$aur_rpc_base_url?v=$AUR_V&type=multiinfo&$info_request") // do {
            warn "[!] Unable to get info for local packages\n";
            $? = 1 << 8;
            return;
          }
    );

    ref($multiinfo->{results}) eq 'ARRAY' or return;

    my $i = 0;
    my %for_update;
    foreach my $hash_ref (@{$multiinfo->{results}}) {

        ref($hash_ref) eq 'HASH' or next;

        my $pkgname = $hash_ref->{Name};
        my $version = $hash_ref->{Version};

        if ($lconfig{show_ood}) {
            say "$c{bgreen}$pkgname$c{reset} has been flagged out of date!" if $hash_ref->{OutOfDate};
        }

        if (
            versioncmp($packages{$pkgname}, $version) == -1
            or (    $lconfig{devel}
                and $pkgname =~ /-(?:git|svn|bzr|cvs|hg|darcs|nightly(?:|[-_].+))\z/)
          ) {
            $for_update{++$i} = $pkgname;
            $for_update{$pkgname} = $pkgname;
            printf("$c{bblue}%2s$c{reset}. $c{bold}%s$c{reset}: $c{bred}%s$c{reset} --> $c{bgreen}%s$c{reset}\n",
                   $i, $pkgname, $packages{$pkgname}, $version);
        }
        elsif ($version ne $packages{$pkgname}) {
            say "$c{bold}$pkgname$c{reset} has a different version in AUR!",
              " ($c{bred}$packages{$pkgname}$c{reset} --> $c{bgreen}$version$c{reset})"
              if $lconfig{debug};
        }
    }

    my @for_update;
    if (keys %for_update) {
        given ($term->readline("\n=>> Choose packages for upgrade (default: all)\n>$c{reset} ")) {
            when (['all', q{}]) {
                @for_update =
                  sort map { $for_update{$_} } grep { /^[0-9]{1,2}\z/ && $_ > 0 && $_ <= $i } keys %for_update;
            }
            default {
                @for_update = map { $for_update{$_} } grep { exists $for_update{$_} } split /[,\s]+/;
            }
        }
    }
    else {
        say "$c{bold}\[*] No AUR updates found!$c{reset}";
    }

    foreach my $pkgname (@for_update) {

        # Check for `explicitly installed`
        (local $lconfig{main_pkg} = $pkgname)
          if (`/usr/bin/pacman -Qie \Q$pkgname\E` =~ /\S/);

        if (install_package($pkgname)) {
            say "[*] $pkgname has been upgraded!" if $lconfig{debug};
        }
        else {
            warn "[!] $c{bold}$pkgname$c{reset} has *NOT* been upgraded!\n";
        }
    }

    return 1;
}

sub show_stats {
    opendir my $dir_h, $lconfig{pacman_local_dir}
      or die "$c{bred}\[x] Unable to open dir '$lconfig{pacman_local_dir}':$c{reset} $!";

    my ($total_size, $num_of_pkgs, %dependencies, %reason_deps);

    my %packages;
    my $append_package = sub {
        my ($date, $pkg, $key) = @_;

        $packages{$key}{new} //= [[q{}, 0]];
        $packages{$key}{old} //= [[q{}, 'inf']];

        if ($date < $packages{$key}{old}[-1][1]) {
            unshift @{$packages{$key}{old}}, [$pkg, $date];
            @{$packages{$key}{old}} = sort { $a->[1] <=> $b->[1] } @{$packages{$key}{old}};
            pop @{$packages{$key}{old}} if @{$packages{$key}{old}} > $lconfig{packages_in_stats};
        }
        if ($date > $packages{$key}{new}[-1][1]) {
            unshift @{$packages{$key}{new}}, [$pkg, $date];
            @{$packages{$key}{new}} = sort { $b->[1] <=> $a->[1] } @{$packages{$key}{new}};
            pop @{$packages{$key}{new}} if @{$packages{$key}{new}} > $lconfig{packages_in_stats};
        }
        return 1;

    };

    while (defined(my $subdir = readdir $dir_h)) {

        next if $subdir eq q{.} or $subdir eq q{..};
        -d "$lconfig{pacman_local_dir}/$subdir" or next;

        ++$num_of_pkgs;
        my ($current_pkg) = $subdir =~ /^(.+?)-[^-]+-[^-]+$/;

        open my $fh, '<:utf8', catfile($lconfig{pacman_local_dir}, $subdir, 'desc') or next;
        while (defined(my $line = <$fh>)) {
            given ($line) {
                when ("%REASON%\n") {
                    $reason_deps{$current_pkg} = ();
                }
                when ("%DEPENDS%\n") {
                    while (defined(my $dep = <$fh>)) {
                        chomp $dep;
                        last if $dep eq q{};
                        $dependencies{strip_version($dep)} = ();
                    }
                }
                when ($_ eq "%PROVIDES%\n" and exists $reason_deps{$current_pkg}) {
                    while (defined(my $provided = <$fh>)) {
                        chomp $provided;
                        last if $provided eq q{};
                        push @{$reason_deps{$current_pkg}}, strip_version($provided);
                    }
                }
                when ("%SIZE%\n") {
                    $total_size += <$fh>;
                }
                when ("%BUILDDATE%\n") {
                    chomp(my $date = <$fh>);
                    $append_package->($date, $current_pkg, 'built');
                }
                when ("%INSTALLDATE%\n") {
                    chomp(my $date = <$fh>);
                    $append_package->($date, $current_pkg, 'installed');
                }
            }
        }
    }
    closedir $dir_h;

    my $as_dep_packages = keys %reason_deps;

    print <<"STATS";
$c{bold}** Total installed packages:$c{byellow} $num_of_pkgs$c{reset}
$c{bold}** Explicitly installed packages:$c{byellow} ${\($num_of_pkgs - $as_dep_packages)}$c{reset}
$c{bold}** Asdep installed packages:$c{byellow} $as_dep_packages$c{reset}
$c{bold}** Theoretical space used by packages:$c{byellow} ${\int $total_size / 1024**2} MB$c{reset}\n
$c{bold}** Oldest built packages:$c{byellow} @{[map { $_->[0] } @{$packages{built}{old}}]}$c{reset}
$c{bold}** Newest built packages:$c{byellow} @{[map { $_->[0] } @{$packages{built}{new}}]}$c{reset}\n
$c{bold}** Oldest installed packages:$c{byellow} @{[map { $_->[0] } @{$packages{installed}{old}}]}$c{reset}
$c{bold}** Newest installed packages:$c{byellow} @{[map { $_->[0] } @{$packages{installed}{new}}]}$c{reset}\n
STATS

    require List::Util;
    print "$c{bold}** Unneeded packages:$c{byellow}";
    while (my ($key, $value) = each %reason_deps) {
        next if exists $dependencies{$key};
        if (ref $value eq 'ARRAY') {
            next if List::Util::first(sub { exists $dependencies{$_} }, @{$value});
        }
        print qq{ $key};
    }
    say $c{reset};

    main_quit();
}

sub _parse_pkgname {
    my ($pkgref) = @_;

    # Strip `aur/` from `aur/<pkgname>`
    if ($$pkgref =~ m{^aur/(.+)}) {
        $$pkgref = $1;
        return 1;
    }

    return;
}

# MAIN

my @argv_packages = get_non_arguments_from_array(@left_over_arguments);

if ($lconfig{S} or $lconfig{sync}) {    # -S
    if ($lconfig{i} or $lconfig{info}) {    # -Si
        foreach my $pkg (@argv_packages) {

            local $lconfig{aur} = 1 if _parse_pkgname(\$pkg);

            if (!$lconfig{aur} && is_available_in_pacman_repo($pkg)) {
                execute_pacman_command(0, qw(-Si), $pkg);
            }
            else {
                my $info = info_for_package($pkg) // do {
                    warn "[!] Package not found: $pkg\n";
                    $? = 1 << 8;
                    next;
                };
                show_info($info);
            }
        }
    }
    elsif ($lconfig{l} or $lconfig{local}) {    # -Sl
        my $curdir = rel2abs(curdir());
        foreach my $pkg (@argv_packages) {
            local $lconfig{clone_dir} = $curdir;
            local $lconfig{main_pkg}  = $pkg;
            local $lconfig{nopull}    = 1;
            if (!install_package($pkg)) {
                warn "[!] Package not found: $pkg\n";
                $? = 1 << 8;
                next;
            }
        }
    }
    elsif ($lconfig{u} or $lconfig{sysupgrade}) {    # -Su
        update_local_packages();
    }
    elsif ($lconfig{s} or $lconfig{search}) {        # -Ss
        search_aur_packages(@argv_packages);
    }
    elsif ($lconfig{m} or $lconfig{maintainer}) {    # -Sm
        foreach my $maintainer (@argv_packages) {
            say "=>> ${maintainer}'s packages:" if $lconfig{debug};
            list_aur_maintainer_packages($maintainer)
              or do {
                warn "[!] Maintainer not found: $maintainer\n";
                $? = 1 << 8;
                next;
              };
        }
    }
    elsif ($lconfig{p} or $lconfig{pkgbuild}) {      # -Sp
        foreach my $pkg (@argv_packages) {

            local $lconfig{aur} = 1 if _parse_pkgname(\$pkg);

            download_package($pkg, $lconfig{clone_dir}) or do {
                warn "[!] Package not found: $pkg\n";
                $? = 1 << 8;
                next;
            };
            open my $fh, '<:utf8', 'PKGBUILD'
              or do { warn "[!] Cannot open PKGBUILD of package $pkg: $!\n"; $? = 2 << 8; next };
            say "\n$c{bold}=>> PKGBUILD of: $c{cblack}$c{bgreen}$pkg$c{reset}$c{reset}\n\n", <$fh>;
            close $fh;
        }
    }
    elsif ($lconfig{c} or $lconfig{clean}) {    # -Sc
        clear_cache();
    }
    else {                                      # -S only
        if (@argv_packages) {
            foreach my $pkg (@argv_packages) {
                local $lconfig{aur} = 1 if _parse_pkgname(\$pkg);
                local $lconfig{main_pkg} = $pkg;
                if (install_package($pkg)) {
                    say "[*] Package '$pkg' has been successfully installed!" if $lconfig{debug};
                }
                else {
                    warn "[!] Cannot install package: $pkg\n" if $lconfig{debug};
                }
            }
        }
    }
}
elsif ($lconfig{C} or $lconfig{comments}) {    # -C
    foreach my $pkg (@argv_packages) {
        local $lconfig{aur} = 1 if _parse_pkgname(\$pkg);
        my $info = info_for_package($pkg) // do {
            warn "[!] Package not found: $pkg\n";
            $? = 1 << 8;
            next;
        };
        say "$c{bold}\[*] AUR comments for $c{bgreen}$pkg$c{reset}$c{bold}$c{reset}\n$c{bold}\[*] URL:$c{reset} ",
          sprintf($aur_package_id_url, $info->{ID}), "\n";
        foreach my $comment (get_comments($info->{ID})) {
            say $comment;
        }
    }
}
elsif ($lconfig{G} or $lconfig{get}) {    # -G
    if ($lconfig{d} or $lconfig{with_deps}) {
        my $curdir = rel2abs(curdir());
        foreach my $pkg (@argv_packages) {
            local $lconfig{aur}            = 1 if _parse_pkgname(\$pkg);
            local $lconfig{clone_dir}      = $curdir;
            local $lconfig{main_pkg}       = $pkg;
            local $lconfig{nobuild}        = 1;
            local $lconfig{noinstall}      = 1;
            local $lconfig{noconfirm}      = 1;
            local $lconfig{noedit}         = 1;
            local $lconfig{noinfo}         = 1;
            local $lconfig{recompute_deps} = 0;

            if (!install_package($pkg)) {
                warn "[!] Package not found: $pkg\n";
                $? = 1 << 8;
                next;
            }
        }
    }
    else {
        foreach my $pkg (@argv_packages) {
            local $lconfig{aur} = 1 if _parse_pkgname(\$pkg);
            say "[*] Getting tarball of: $pkg" if $lconfig{debug};
            if (!download_package($pkg, rel2abs(curdir()))) {
                warn "[!] Package not found: $pkg\n";
                $? = 1 << 8;
                next;
            }
        }
    }
}
elsif ($lconfig{U} or $lconfig{upgrade}) {    # -U
    foreach my $pkg (@argv_packages) {
        if ($pkg =~ /$pkg_suffix_re/o and -e $pkg) {    # install from current dir
            execute_pacman_command(1, qw(-U), $lconfig{asdep} ? '--asdeps' : (), $pkg);
        }
        else {                                          # install from cache dir
            foreach my $dir (grep { -d } glob("$lconfig{clone_dir}/*")) {
                my $tarball = find_local_package($pkg, $dir) || next;
                say "$c{bold}\[*] Installing:$c{reset} $tarball";
                execute_pacman_command(1, qw(-U), $lconfig{asdep} ? '--asdeps' : (), $tarball);
            }
        }
    }
}
elsif ($lconfig{R} or $lconfig{remove}) {               # -R
    @pacman_arguments = ();
    execute_pacman_command(1, @left_over_arguments);
}
elsif ($lconfig{D} or $lconfig{database}) {             # -D
    @pacman_arguments = ();
    push(@left_over_arguments, '--asdeps') if $lconfig{asdep};
    execute_pacman_command(1, @left_over_arguments);
}
elsif ($lconfig{F} or $lconfig{files}) {                # -F
    @pacman_arguments = ();
    push(@left_over_arguments, '--quiet')  if $lconfig{quiet};
    push(@left_over_arguments, '--search') if $lconfig{search};
    execute_pacman_command(0, @left_over_arguments);
}
elsif ($lconfig{Q} or $lconfig{query}) {                # -Q
    @pacman_arguments = ();
    push(@left_over_arguments, '--search') if $lconfig{search};
    push(@left_over_arguments, '--info')   if $lconfig{info};
    push(@left_over_arguments, '--quiet')  if $lconfig{quiet};
    execute_pacman_command(0, @left_over_arguments);
}
elsif ($lconfig{T} or $lconfig{deptest}) {              # -T
    @pacman_arguments = ();
    execute_pacman_command(0, @left_over_arguments);
}

main_quit();
